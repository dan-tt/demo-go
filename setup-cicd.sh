#!/bin/bash

# CI/CD Pipeline Setup Script
# This script helps configure the GitHub Actions CI/CD pipeline for Render deployment

set -e

echo "üöÄ CI/CD Pipeline Setup for Render Deployment"
echo "=============================================="

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "‚ùå Not in a git repository"
    echo "Please run this script from your project root"
    exit 1
fi

echo "‚úÖ Git repository detected"

# Check if GitHub CLI is installed
if command -v gh &> /dev/null; then
    echo "‚úÖ GitHub CLI is available"
    
    # Check if user is authenticated
    if gh auth status > /dev/null 2>&1; then
        echo "‚úÖ GitHub CLI is authenticated"
    else
        echo "‚ö†Ô∏è  GitHub CLI not authenticated"
        echo "Run: gh auth login"
    fi
else
    echo "‚ö†Ô∏è  GitHub CLI not found"
    echo "Install from: https://cli.github.com/"
fi

echo ""
echo "üìÅ Pipeline Files Created:"
echo "   .github/workflows/ci-cd.yml - Main CI/CD pipeline"
echo "   .golangci.yml - Linting configuration"
echo "   Dockerfile - Production-ready container image"
echo "   render.yaml - Render deployment configuration"
echo "   tests/load-test.js - k6 performance tests"

echo ""
echo "üîß Required GitHub Secrets:"
echo ""
echo "Repository Secrets (GitHub ‚Üí Settings ‚Üí Secrets):"
echo "   RENDER_API_KEY=rnd_xxxxxxxxxxxxx"
echo "   RENDER_STAGING_SERVICE_ID=srv-xxxxxxxxxxxxx"
echo "   RENDER_PRODUCTION_SERVICE_ID=srv-xxxxxxxxxxxxx"
echo "   STAGING_HEALTH_URL=https://your-staging-app.onrender.com"
echo "   PRODUCTION_HEALTH_URL=https://your-production-app.onrender.com"
echo ""
echo "Optional Secrets:"
echo "   SLACK_WEBHOOK=https://hooks.slack.com/services/xxx/xxx/xxx"

echo ""
echo "üåê Render Service Setup:"
echo ""
echo "1. Create Render Account: https://render.com"
echo "2. Create MongoDB Database:"
echo "   ‚Ä¢ Go to Dashboard ‚Üí New ‚Üí PostgreSQL/MongoDB"
echo "   ‚Ä¢ Name: demo-go-mongodb"
echo "   ‚Ä¢ Plan: Starter (Free)"
echo ""
echo "3. Create Redis Cache:"
echo "   ‚Ä¢ Go to Dashboard ‚Üí New ‚Üí Redis"
echo "   ‚Ä¢ Name: demo-go-redis"
echo "   ‚Ä¢ Plan: Starter (Free)"
echo ""
echo "4. Create Web Service:"
echo "   ‚Ä¢ Go to Dashboard ‚Üí New ‚Üí Web Service"
echo "   ‚Ä¢ Connect GitHub repository"
echo "   ‚Ä¢ Name: demo-go-api"
echo "   ‚Ä¢ Environment: Docker"
echo "   ‚Ä¢ Plan: Starter (Free)"
echo "   ‚Ä¢ Auto-Deploy: No (handled by GitHub Actions)"

echo ""
echo "üîë Getting Render API Key:"
echo "   1. Go to Render Dashboard ‚Üí Account Settings"
echo "   2. Click on 'API Keys' tab"
echo "   3. Generate new API key"
echo "   4. Copy the key (starts with 'rnd_')"

echo ""
echo "üéØ Pipeline Triggers:"
echo "   ‚Ä¢ Push to 'develop' ‚Üí Deploy to Staging"
echo "   ‚Ä¢ Push to 'main' ‚Üí Deploy to Production"
echo "   ‚Ä¢ Pull Request ‚Üí Run Tests Only"

echo ""
echo "üìä Pipeline Features:"
echo "   ‚úÖ Automated Testing (Unit + Integration)"
echo "   ‚úÖ Code Linting (golangci-lint)"
echo "   ‚úÖ Security Scanning (Gosec + Trivy)"
echo "   ‚úÖ Docker Multi-architecture Build"
echo "   ‚úÖ Performance Testing (k6)"
echo "   ‚úÖ Health Checks"
echo "   ‚úÖ Slack Notifications"
echo "   ‚úÖ Artifact Management"

echo ""
echo "üß™ Testing the Pipeline:"
echo ""
echo "1. Commit and push changes:"
echo "   git add ."
echo "   git commit -m 'Add CI/CD pipeline'"
echo "   git push origin main"
echo ""
echo "2. Check GitHub Actions:"
echo "   ‚Ä¢ Go to GitHub ‚Üí Actions tab"
echo "   ‚Ä¢ Monitor pipeline execution"
echo ""
echo "3. Verify deployment:"
echo "   ‚Ä¢ Check Render dashboard for deployment status"
echo "   ‚Ä¢ Test health endpoint: curl https://your-app.onrender.com/health"

echo ""
echo "üîç Monitoring and Debugging:"
echo ""
echo "GitHub Actions Logs:"
echo "   gh run list"
echo "   gh run view <run-id>"
echo ""
echo "Render Logs:"
echo "   render logs --service-id srv-xxxxxxxxxxxxx --follow"
echo ""
echo "Local Testing:"
echo "   docker build -t demo-go-api ."
echo "   docker run -p 8080:8080 demo-go-api"
echo "   k6 run tests/load-test.js"

echo ""
echo "üìö Documentation:"
echo "   ‚Ä¢ Pipeline Guide: CICD_PIPELINE.md"
echo "   ‚Ä¢ Render Docs: https://render.com/docs"
echo "   ‚Ä¢ GitHub Actions: https://docs.github.com/actions"

echo ""
echo "‚ö†Ô∏è  Important Notes:"
echo "   ‚Ä¢ Free tier has limited resources and may sleep"
echo "   ‚Ä¢ Production deployments require manual approval"
echo "   ‚Ä¢ Keep API keys and secrets secure"
echo "   ‚Ä¢ Monitor costs for production workloads"

echo ""
echo "üéâ CI/CD Pipeline setup complete!"
echo "Configure the required secrets and push to trigger your first deployment."
