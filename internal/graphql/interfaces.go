package graphql

import (
	"context"

	"demo-go/internal/domain"
)

// This file will be automatically generated by gqlgen
// These interfaces are defined here for reference

// QueryResolver interface for query operations
type QueryResolver interface {
	GetUser(ctx context.Context, id string) (*domain.UserResponse, error)
	GetUsers(ctx context.Context, limit *int, offset *int) ([]*domain.UserResponse, error)
	SearchUsers(ctx context.Context, query string) ([]*domain.UserResponse, error)
	Me(ctx context.Context) (*domain.UserResponse, error)
}

// MutationResolver interface for mutation operations
type MutationResolver interface {
	CreateUser(ctx context.Context, input CreateUserInput) (*domain.UserResponse, error)
	UpdateUser(ctx context.Context, id string, input UpdateUserInput) (*domain.UserResponse, error)
	DeleteUser(ctx context.Context, id string) (bool, error)
}

// SubscriptionResolver interface for subscription operations
type SubscriptionResolver interface {
	UserCreated(ctx context.Context) (<-chan *domain.UserResponse, error)
	UserUpdated(ctx context.Context) (<-chan *domain.UserResponse, error)
	UserDeleted(ctx context.Context) (<-chan string, error)
}

// CreateUserInput represents the input for creating a new user via GraphQL.
type CreateUserInput struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type UpdateUserInput struct {
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

// Config for the generated GraphQL server
type Config struct {
	Resolvers ResolverRoot
}

// ResolverRoot interface
type ResolverRoot interface {
	Query() QueryResolver
	Mutation() MutationResolver
	Subscription() SubscriptionResolver
}

// ExecutableSchema interface
type ExecutableSchema interface {
	Schema() string
	Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool)
	Exec(ctx context.Context) ResponseData
}

// ResponseData represents GraphQL response data
type ResponseData struct {
	Data       interface{}            `json:"data,omitempty"`
	Errors     []Error                `json:"errors,omitempty"`
	Extensions map[string]interface{} `json:"extensions,omitempty"`
}

// Error represents a GraphQL error
type Error struct {
	Message    string                 `json:"message"`
	Path       []interface{}          `json:"path,omitempty"`
	Locations  []Location             `json:"locations,omitempty"`
	Extensions map[string]interface{} `json:"extensions,omitempty"`
}

// Location represents error location
type Location struct {
	Line   int `json:"line"`
	Column int `json:"column"`
}

// NewExecutableSchema creates a new executable schema (this will be generated)
func NewExecutableSchema(cfg Config) ExecutableSchema {
	// This function will be generated by gqlgen
	return nil
}
